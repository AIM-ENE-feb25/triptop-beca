@startuml
actor reiziger as "Reiziger"
participant reservationController AS "reservationController:\n ReservationControllerController"
participant bookingService AS "bookingService:\n BookingService"
participant initialState AS "initialState:\n InitialState"
participant hotelBookingState AS "hotelBookingState:\n HotelBookingState"
participant flightBookingState AS "flightBookingState:\n FlightBookingState"
participant carBookingState AS "carBookingState:\n CarBookingState"
participant bookingAdapter AS "bookingAdapter:\n BookingAdapter"

reiziger -> reservationController: 1. bookTrip(request: BookingRequest)
reservationController -> bookingService: 2. bookTrip(request: BookingRequest)

bookingService -> initialState: 3. processBooking(BookingRequest request)

initialState -> hotelBookingState: 4. setState(new HoteltBookingState());
hotelBookingState -> bookingAdapter: 5. handleRequest(BookingRequest request, BookingAdapterWrapper adapterWrapper)
bookingAdapter --> hotelBookingState: 6. hotelBookingResponse
hotelBookingState --> bookingService: 7. hotelBookingResponse

hotelBookingState -> flightBookingState: 8. setState(new FlightBookingState());
flightBookingState -> bookingAdapter: 9. handleRequest(BookingRequest request, BookingAdapterWrapper adapterWrapper)
bookingAdapter --> flightBookingState: 10. flightBookingResponse
flightBookingState --> bookingService: 11. flightBookingResponse

flightBookingState -> carBookingState: 12. setState(new CarBookingState());
carBookingState -> bookingAdapter: 13. handleRequest(BookingRequest request, BookingAdapterWrapper adapterWrapper)
bookingAdapter --> carBookingState: 14. carBookingResponse
carBookingState --> bookingService: 15. carBookingResponse

carBookingState -> initialState: 16. setState(new InitialState());
bookingService --> reservationController: 17. return BookingResponse
reservationController --> reiziger: 18. return BookingResponse
@enduml
